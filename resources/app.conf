# # version of the pretrained model
[deeplearn_model_packer]
version = 0.0.2

# command line applications and sections to delete after load
[cli]
apps = list: ${cli_config_default:apps}, cleaner_cli, deeplearn_fac_batch_app,
  deeplearn_fac_info_app, deeplearn_fac_result_app, deeplearn_fac_model_app,
  deeplearn_fac_package_app, app, pred_app
app_removes = list: list_actions_cli
cleanups = list: ${cli_config_default:cleanups}, cleaner_cli, deeplearn_fac_batch_app,
  deeplearn_fac_info_app, deeplearn_fac_result_app, deeplearn_fac_model_app,
  deeplearn_fac_package_app, app, pred_app
cleanup_removes = list: log_cli, factory_access_cli

# configure what to delete on clean
[cleaner_cli]
paths = eval: (
  ('${default:temporary_dir}', '**/__pycache__'),
  ('${default:data_dir}', '*.log'))

# carry over log config to subprocesses when batching
[multiprocess_log_config]
section = log_cli

# import command line apps
#
# mimicsid default.conf imported twice to override deeplearn dependent
# interpolations and model config for this package
[import]
config_files = list:
    resource(zensols.util): resources/default.conf,
    resource(zensols.util): resources/escape.conf,
    resource(zensols.util): resources/cli.conf,
    resource(zensols.util): resources/cli-config.conf,
    resource(zensols.util): resources/cleaner.conf,
    resource(zensols.deeplearn): resources/cli.conf,
    resource(zensols.deeplearn): resources/cli-pack.conf,
    resource(zensols.deepnlp): resources/cli.conf,
    resource(zensols.deepnlp): resources/cleaner.conf

# configuration files are optional
[config_cli]
expect = False

# -c config flag with file
[config_import]
references = list: conf_esc, package, default, deeplearn_model_packer

[config_imp]
type = import
config_files = list: 
    ^{override},
    ^{config_path},
    resource(zensols.mednlp): resources/default.conf,
    resource(zensols.mimic): resources/default.conf,
    resource(zensols.mimicsid): resources/default.conf,
    ^{override},
    ^{config_path},
    resource(zensols.mimicsid): resources/model/default.conf,
    ^{override},
    ^{config_path},
    resource(zensols.nlp): resources/obj.conf,
    resource(zensols.nlp): resources/mapper.conf,
    resource(zensols.mednlp): resources/obj.conf,
    resource(zensols.mimic): resources/obj.conf,
    resource(zensols.mimic): resources/decorator.conf,
    resource(zensols.mimicsid): resources/obj.conf,
    resource(zensols.mimicsid): resources/model/obj.conf,
    resource(zensols.mimicsid): resources/model/adm.conf,
    ^{config_path},
    ^{override}

# CLI config
[app]
class_name = zensols.mimicsid.Application
corpus = instance: mimic_corpus
anon_resource = instance: mimicsid_anon_resource
note_stash = instance: mimicsid_note_stash

[pred_app]
class_name = zensols.mimicsid.PredictionApplication
note_stash = instance: mimicsid_note_stash
section_predictor = instance: mimicsid_section_predictor

[app_decorator]
option_excludes = dict: {
  'corpus', 'anon_resource', 'note_stash', 'config_factory', 'model_packer_name'}
option_overrides = dict:
  {'hadm_id': {'long_name': 'hadm'},
   'note_category': {'long_name': 'cat'},
   'section_id': {'long_name': 'sec'},
   'output_format': {'long_name': 'format', 'short_name': 'f'}}
mnemonic_overrides = dict:
  {'dump_ontology': 'ontology',
   'write_note': 'note',
   'admission_notes': 'notes',
   'note_counts_by_admission': 'admissions'}

[pred_app_decorator]
option_excludes = dict: {'note_stash', 'config_factory', 'section_predictor'}
mnemonic_overrides = dict: {'predict_sections': 'predict'}
option_overrides = dict: {
   'input_path': {'long_name': 'input', 'metavar': '<FILE|DIR>'},
   'output_path': {'long_name': 'path', 'metavar': '<FILE|DIR|->'},
   'file_limit': {'long_name': 'plimit'},
   'out_type': {'long_name': 'pformat'}}
