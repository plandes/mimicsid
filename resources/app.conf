[cli]
apps = list: ${cli_config_default:apps}, app, pred_app
app_removes = list: list_actions_cli
cleanups = list: ${cli_config_default:cleanups}

[import]
config_files = list:
  resource(zensols.util): resources/default.conf,
  resource(zensols.util): resources/escape.conf,
  resource(zensols.util): resources/cli.conf,
  resource(zensols.util): resources/cli-config.conf,
  resource(zensols.util): resources/cleaner.conf,
  resource(zensols.deeplearn): resources/cli.conf,
  resource(zensols.deepnlp): resources/cli.conf,
  resource(zensols.deepnlp): resources/cleaner.conf

[config_cli]
expect = False

[config_import]
references = list: conf_esc, package, default

[config_imp]
type = import
config_files = list:
  ^{override}, ^{config_path},
  resource(zensols.util): resources/default.conf,
  resource(zensols.mednlp): resources/default.conf,
  resource(zensols.mimic): resources/default.conf,
  resource(zensols.mimicsid): resources/default.conf,
  ^{override}, ^{config_path},
  resource(zensols.nlp): resources/obj.conf,
  resource(zensols.nlp): resources/mapper.conf,
  resource(zensols.mednlp): resources/obj.conf,
  resource(zensols.mednlp): resources/bioner.yml,
  resource(zensols.mimic): resources/obj.conf,
  resource(zensols.mimic): resources/decorator.conf,
  resource(zensols.mimicsid): resources/anon.conf,
  resource(zensols.mimicsid): resources/obj.conf,
  resource(zensols.mimicsid): resources/adm.conf,
  ^{override}, ^{config_path}

[app]
class_name = zensols.mimicsid.Application
corpus = instance: mimic_corpus
anon_resource = instance: msid_anon_resource
note_stash = instance: msid_note_stash

[app_decorator]
option_excludes = set: corpus, anon_resource, note_stash, config_factory, model_packer_name
option_overrides = dict:
  {'hadm_id': {'long_name': 'hadm'},
   'note_category': {'long_name': 'cat'},
   'section_id': {'long_name': 'sec'},
   'out_file': {'short_name': 'o'},
   'out_dir': {'long_name': 'dir', 'short_name': 'd', 'metavar': 'DIRECTORY'},
   'output_format': {'long_name': 'format', 'short_name': 'f'}}
mnemonic_overrides = dict:
  {'dump_ontology': 'ontology',
   'write_note': 'note',
   'write_admission': 'adm',
   'admission_notes': 'notes',
   'note_counts_by_admission': 'adms'}

[pred_app]
class_name = zensols.mimicsid.PredictionApplication
note_stash = instance: msid_note_stash
section_predictor = instance: msid_section_predictor

[pred_app_decorator]
option_excludes = dict: {'note_stash', 'config_factory', 'section_predictor'}
mnemonic_overrides = dict: {'predict_sections': 'predict'}
option_overrides = dict: {
   'input_path': {'long_name': 'input', 'metavar': '<FILE|DIR>'},
   'output_path': {'long_name': 'path', 'metavar': '<FILE|DIR|->'},
   'file_limit': {'long_name': 'plimit'},
   'out_type': {'long_name': 'pformat'}}
