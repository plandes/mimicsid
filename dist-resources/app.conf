# # version of the pretrained model
[deeplearn_model_packer]
version = 0.1.0

# command line applications and sections to delete after load
[cli]
apps = list: ${cli_config_default:apps}, deeplearn_fac_batch_app,
  deeplearn_fac_info_app, deeplearn_fac_result_app, deeplearn_fac_model_app,
  deeplearn_fac_package_app, app
app_removes = list: list_actions_cli
cleanups = list: ${cli_config_default:cleanups}, deeplearn_fac_batch_app,
  deeplearn_fac_info_app, deeplearn_fac_result_app, deeplearn_fac_model_app,
  deeplearn_fac_package_app, app
cleanup_removes = list: log_cli, factory_access_cli

[cleaner_cli]
paths = eval: (
  ('${default:temporary_dir}', '*.log', '**/__pycache__'),
  ('results',),
  ('${default:data_dir}',),
  ('corpus',))

[log_cli]
default_app_level = info

# carry over log config to subprocesses when batching
[multiprocess_log_config]
section = log_cli

# import command line apps
#
# mimicsid default.conf imported twice to override deeplearn dependent
# interpolations and model config for this package
[import]
config_files = list:
    resource(zensols.util): resources/default.conf,
    resource(zensols.util): resources/escape.conf,
    resource(zensols.util): resources/cli.conf,
    resource(zensols.util): resources/cli-config.conf,
    resource(zensols.util): resources/cleaner.conf,
    resource(zensols.deeplearn): resources/cli.conf,
    resource(zensols.deeplearn): resources/cli-pack.conf,
    resource(zensols.deepnlp): resources/cli.conf,
    resource(zensols.deepnlp): resources/cleaner.conf

#[config_cli_decorator]
#option_overrides = dict: {'config_path': {'default': 'models/glove300.conf'}}

# -c config flag with file
[config_import]
references = list: conf_esc, package, default, deeplearn_model_packer
sections = list: app_imp_conf

[app_imp_conf]
#type_map = dict: {'yml': 'condyaml', 'conf': 'importini'}
type = import
config_files = list: 
    ^{override}, ^{config_path},
    resource(zensols.mednlp): resources/default.conf,
    resource(zensols.mimic): resources/default.conf,
    dist-resources/default.conf,
    ^{override}, ^{config_path},
    dist-resources/model/default.conf,
    ^{override}, ^{config_path},
    resource(zensols.nlp): resources/obj.conf,
    resource(zensols.nlp): resources/mapper.conf,
    resource(zensols.mednlp): resources/obj.conf,
    resource(zensols.mimic): resources/obj.conf,
    resource(zensols.mimic): resources/decorator.conf,
    resource(zensols.mimicsid): resources/share.conf,
    resource(zensols.mimicsid): dist-resources/obj.conf,
    resource(zensols.mimicsid): dist-resources/model/obj.conf,
    ^{config_path}, ^{override}

[app]
class_name = zensols.mimicsid.dapp.DistApplication
anon_resource = instance: msid_anon_resource
preempt_stash = instance: mimic_note_document_preemptive_stash

[app_decorator]
option_excludes = set: anon_resource, , preempt_stash
mnemonic_overrides = dict: {'preempt_notes': 'preempt'}
