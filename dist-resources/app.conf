[deeplearn_model_packer]
version = 0.1.0

[cli]
apps = list: ${cli_config_default:apps}, deeplearn_fac_batch_app,
  deeplearn_fac_info_app, deeplearn_fac_result_app, deeplearn_fac_model_app,
  deeplearn_fac_package_app, app
app_removes = list: list_actions_cli
cleanups = list: ${cli_config_default:cleanups}, deeplearn_fac_batch_app,
  deeplearn_fac_info_app, deeplearn_fac_result_app, deeplearn_fac_model_app,
  deeplearn_fac_package_app, app
cleanup_removes = list: log_cli, factory_access_cli

[log_cli]
default_app_level = info
#loggers = dict: {'zensols.deepnlp.vectorize': 'debug'}

[multiprocess_log_config]
section = log_cli

[import]
config_files = list:
    resource(zensols.util): resources/default.conf,
    resource(zensols.util): resources/escape.conf,
    resource(zensols.util): resources/cli.conf,
    resource(zensols.util): resources/cli-config.conf,
    resource(zensols.util): resources/cleaner.conf,
    resource(zensols.deeplearn): resources/cli.conf,
    resource(zensols.deeplearn): resources/cli-pack.conf,
    resource(zensols.deepnlp): resources/cli.conf,
    resource(zensols.deepnlp): resources/cleaner.conf

# -c config flag with file
[config_import]
references = list: conf_esc, package, default, deeplearn_model_packer
sections = list: app_imp_conf

[app_imp_conf]
type = import
config_files = list: 
    ^{config_path}, ^{override},
    resource(zensols.mednlp): resources/default.conf,
    resource(zensols.mimic): resources/default.conf,
    resource(zensols.mimicsid): resources/default.conf,
    resources/default.conf,
    dist-resources/default.conf,
    ^{config_path}, ^{override},
    resource(zensols.nlp): resources/obj.conf,
    resource(zensols.nlp): resources/mapper.conf,
    resource(zensols.mednlp): resources/obj.conf,
    resource(zensols.mimic): resources/obj.conf,
    resource(zensols.mimic): resources/decorator.conf,
    resource(zensols.mimicsid): resources/anon.conf,
    resource(zensols.mimicsid): resources/lang.yml,
    resource(zensols.mimicsid): dist-resources/obj.conf,
    ^{config_path}, ^{override}

[app]
class_name = zensols.mimicsid.dapp.DistApplication
anon_resource = instance: msid_anon_resource
preempt_stash = instance: mimic_note_document_preemptive_stash

[app_decorator]
option_excludes = set: anon_resource, , preempt_stash
mnemonic_overrides = dict: {'preempt_notes': 'preempt'}
