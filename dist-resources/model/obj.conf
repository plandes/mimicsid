# description: medical section ID model resource library

## Import
#
[import]
sections = list: msid_obj_imp

[msid_obj_imp]
type_map = dict: {'yml': 'condyaml', 'conf': 'importini'}
config_files = list:
    resource(zensols.mimicsid): resources/model/header-default.yml,
    resource(zensols.nlp): resources/component.conf,
    resource(zensols.deeplearn): resources/obj.conf,
    resource(zensols.deepnlp): resources/obj.conf,
    resource(zensols.deepnlp): resources/feature.conf,
    resource(zensols.deepnlp): resources/vectorizer.conf,
    resource(zensols.deepnlp): resources/token-classify.yml,
    resource(zensols.deepnlp): resources/embed-crf.conf,
    resource(zensols.mednlp): resources/cui2vec.yml,
    resource(zensols.mimicsid): resources/model/vectorizer.yml,
    resource(zensols.mimicsid): resources/model/batch.yml,
    resource(zensols.mimicsid): resources/model/model.conf,
    resource(zensols.mimicsid): resources/model/header.yml


## Model version
#
[msidd_model_info]
version = '${deeplearn_model_packer:version}'.replace('.', '_')
zenodo_base_url = https://zenodo.org/record/8253570/files


## Model installer
#
# section
[msidd_model_resource]
class_name = zensols.install.Resource
url = eval: '${msidd_model_info:zenodo_base_url}/${msidd_default:section_prediction_model}-section-type-v' + ${msidd_model_info:version} + '.zip'
name = None

[msidd_model_installer]
class_name = zensols.install.Installer
package_resource = ${msidd_default:package_resource}
resources = instance: list: msidd_model_resource

# header
[msidd_model_header_resource]
class_name = zensols.install.Resource
url = eval: '${msidd_model_info:zenodo_base_url}/${msidd_default:header_prediction_model}-header-v' + ${msidd_model_info:version} + '.zip'
name = None

[msidd_model_header_installer]
class_name = zensols.install.Installer
package_resource = ${msidd_default:package_resource}
resources = instance: list: msidd_model_header_resource


## Model packer
#
[deeplearn_model_packer]
installer = instance: msidd_model_installer

[mimisid_model_packer_header]
class_name = zensols.deeplearn.model.ModelPacker
installer = instance: msidd_model_header_installer
executor = ${deeplearn_model_packer:executor}
version = ${deeplearn_model_packer:version}


## Predictor
#
# this enables the SQLite connection manager without needing PostgreSQL drivers
# installed; zensols.mednlp/medcat model resources are included
[msidd_model_config]
class_name = zensols.deeplearn.model.SubsetConfig
sections = tuple:
  mimic_admission_persister,
  mimic_base_note_event_persister,
  mimic_diagnosis_persister,
  mimic_note_event_persister,
  mimic_patient_persister,
  mimic_procedure_persister,
  mimic_sqlite_conn_manager,
  mimic_note_paragraph_factory,
  medcat_status_resource,
  medcat_installer
options = tuple:
  mimic_default:conn_manager,
  mednlp_default:medcat_version

# zensols.mimic 1.6.0 made ParagraphFactory abstract; use the whitespace
# paragraph factory using the old model prediction section configuration
[mimic_note_paragraph_factory]
class_name = zensols.mimic.parafac.WhitespaceParagraphFactory

[msidd_section_id_model_packer]
class_name = zensols.deeplearn.model.pack.ModelUnpacker
version = ${deeplearn_model_packer:version}
model_packer_name = deeplearn_model_packer
installer = ${deeplearn_model_packer:installer}
model_config_overwrites = instance: msidd_model_config

[msidd_section_id_model_unpacker]
class_name = zensols.deeplearn.model.pack.ModelUnpacker
version = ${deeplearn_model_packer:version}
model_packer_name = mimisid_model_packer_header
installer = ${mimisid_model_packer_header:installer}
model_config_overwrites = instance: msidd_model_config

# model interface
[msidd_section_predictor]
class_name = zensols.mimicsid.pred.SectionPredictor
section_id_model_unpacker = instance: msidd_section_id_model_packer
header_model_unpacker = instance: msidd_section_id_model_unpacker
min_section_body_len = 1
section_filter_type = eval({'import': ['zensols.mimicsid as m']}):
  m.SectionFilterType.keep_classified
